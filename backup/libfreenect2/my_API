The API reference documentation is provided here https://openkinect.github.io/libfreenect2/.


API Reference

Older versions: 0.1.
Introduction

libfreenect2 is an open source cross-platform driver for Kinect for Windows v2 devices. For information on installation and troubleshooting, see the GitHub repository.

This documentation is designed for application developers who want to extract and use depth and color images from Kinect v2 for further processing. Additional questions and comments not covered by this documentation can be posted to GitHub issues.

This documentation may require some understanding on camera calibration and 3-D geometry.

Features
    Color image processing
    IR and depth image processing
    Registration of color and depth images
    Multiple GPU and hardware acceleration implementations for image processing

Issues and Future Work

    Audio. Raw audio is accessible via Linux USB audio. There is no support for the calibrated directional audio.
    Unstable USB and crashes. Due to differences in driver support, USB problems can happen a lot. Error handling in libfreenect2 is not fully verified for production use.
    Firmware upload. The protocol has been reverse engineered, but use Windows for this right now.
    Example of multiple Kinects.
    Example utility of dumping image frames.
    API for on-demand processing.
    Verification of systematic errors through accurate calibration.
    Bindings for C, Python, Java, etc.

Getting Started

To read the API documentation, start with the Modules page which nicely organizes classes according to their functionalities.

Example programs can be found in the source distribution under the examples directory. There also includes an example CMake build system for a standalone application that uses libfreenect2 binary installation.

Many internal details are hidden from this public API. For details on Kinect v2's USB protocols, depth decoding algorithms, calibration algorithms, and how to implement performance optimizers, you are encouraged to read the source code. The source code is the updated and authoritative reference for any functionalities.

Environment Variables

There are a few environment variables providing controls for both end-users and programmers:


LIBFREENECT2_LOGGER_LEVEL: The default logging level if not explicitly set by the code. 
默认的日志记录级别，如果没有由代码显式设置。

LIBFREENECT2_PIPELINE: The default pipeline if not explicitly set by the code. 
默认管道如果没有由代码显式设置。

LIBFREENECT2_RGB_TRANSFER_SIZE, LIBFREENECT2_RGB_TRANSFERS, LIBFREENECT2_IR_PACKETS, LIBFREENECT2_IR_TRANSFERS: Tuning the USB buffer sizes. Use only if you know what you are doing.
调整USB缓冲区大小。 只有当你知道你在做什么时才使用。

You can also see the following walkthrough for the most basic usage.

Walkthrough

Here is an example to walk you through the API. See examples/Protonect.cpp for the full source.
有一个例子来引导您完成API。 请参阅例子/ Protonect.cpp的完整来源。

Headers
头文件

First, include necessary headers. registration.h and logger.h are optional if you don't use them
必须包括的头文件，registration.h and logger.h是可选择的，不是必须的
#include <libfreenect2/libfreenect2.hpp>
#include <libfreenect2/frame_listener_impl.h>
#include <libfreenect2/registration.h>
#include <libfreenect2/packet_pipeline.h>
#include <libfreenect2/logger.h>

Logging

This shows how to set up the logger and logging level.
这里叙述了如何设置日志和日志级别

  libfreenect2::setGlobalLogger(libfreenect2::createConsoleLogger(libfreenect2::Logger::Debug));

Though libfreenect2 will have an initial global logger created with createConsoleLoggerWithDefaultLevel(). You do not have to explicitly call this if the default is already what you want.
虽然libfreenect2将具有使用createConsoleLoggerWithDefaultLevel（）创建的初始全局日志。如果默认值是你想要的，则不必调用它

You can implement a custom Logger and redirect libfreenect2's log messages to desired places.
您可以实现自定义Logger并将libfreenect2的日志消息重定向到所需的位置。

Here is an example to save log messages to a file.
以下是将日志消息保存到文件的示例。

#include <fstream>
#include <cstdlib>
class MyFileLogger: public libfreenect2::Logger
{
private:
  std::ofstream logfile_;
public:
  MyFileLogger(const char *filename)
  {
    if (filename)
      logfile_.open(filename);
    level_ = Debug;
  }
  bool good()
  {
    return logfile_.is_open() && logfile_.good();
  }
  virtual void log(Level level, const std::string &message)
  {
    logfile_ << "[" << libfreenect2::Logger::level2str(level) << "] " << message << std::endl;
  }
};

And use it

  MyFileLogger *filelogger = new MyFileLogger(getenv("LOGFILE"));
  if (filelogger->good())
    libfreenect2::setGlobalLogger(filelogger);
  else
    delete filelogger;

libfreenect2 uses a single global logger regardless of number of contexts and devices. You may have to implement thread safety measure in log(), which is called from multiple threads. Console loggers are thread safe because std::cout and std::cerr are thread safe.
libfreenect2使用单个全局记录器，而不管上下文和设备的数量。 您可能必须在log（）中实现线程安全性度量，这是从多个线程中调用的。 控制台记录器是线程安全的，因为std :: cout和std :: cerr是线程安全的。

Initialize and Discover Devices
初始化和发现设备

You need these structures for all operations. Here it uses only one device.
您需要所有操作的这些结构。 这里只使用一个设备。

  libfreenect2::Freenect2 freenect2;
  libfreenect2::Freenect2Device *dev = 0;
  libfreenect2::PacketPipeline *pipeline = 0;

You must enumerate all Kinect v2 devices before doing anything else related to devices.
在进行与设备相关的任何其他操作之前，您必须枚举所有Kinect v2设备。

  if(freenect2.enumerateDevices() == 0)
  {
    std::cout << "no device connected!" << std::endl;
    return -1;
  }
  if (serial == "")
  {
    serial = freenect2.getDefaultDeviceSerialNumber();
  }

Also, you can create a specific PacketPipeline instead using the default one for opening the device. Alternatives include OpenGLPacketPipeline, OpenCLPacketPipeline, etc.
此外，您可以使用默认打开设备来创建特定的PacketPipeline。 备选方案包括OpenGLPacketPipeline，OpenCLPacketPipeline等

        pipeline = new libfreenect2::CpuPacketPipeline();

Open and Configure the Device
打开并配置设备

Now you can open the device by its serial number, and using the specific pipeline.
现在，您可以通过其序列号打开设备，并使用特定的管道。

    dev = freenect2.openDevice(serial, pipeline);

You can also open the device without providing a pipeline, then a default is used. There are a few alternative ways to openDevice().
您也可以在不提供管道的情况下打开设备，然后使用默认值。 有几种替代方法openDevice（）。

After opening, you need to attach Framelisteners to the device to receive images frames.
打开后，您需要将Framelisteners连接到设备以接收图像帧。

This SyncMultiFrameListener will wait until all specified types of frames are received once. Like loggers, you may also implement your own frame listeners using the same interface.
该SyncMultiFrameListener将等待所有指定类型的帧被接收一次。 与记录器一样，您也可以使用相同的界面实现自己的框架监听器。

  int types = 0;
  if (enable_rgb)
    types |= libfreenect2::Frame::Color;
  if (enable_depth)
    types |= libfreenect2::Frame::Ir | libfreenect2::Frame::Depth;
  libfreenect2::SyncMultiFrameListener listener(types);
  libfreenect2::FrameMap frames;
  dev->setColorFrameListener(&listener);
  dev->setIrAndDepthFrameListener(&listener);

You cannot configure the device after starting it.
启动后，您无法配置设备。

Start the Device
启动设备

After finishing configuring the device, you can start the device. You must start the device before querying any information of the device.
完成设备配置后，可以启动设备。 在查询设备的任何信息之前，您必须启动设备。

  if (enable_rgb && enable_depth)
  {
    if (!dev->start())
      return -1;
  }
  else
  {
    if (!dev->startStreams(enable_rgb, enable_depth))
      return -1;
  }
  std::cout << "device serial: " << dev->getSerialNumber() << std::endl;
  std::cout << "device firmware: " << dev->getFirmwareVersion() << std::endl;

You can setIrCameraParams() after start if you have your own depth calibration parameters.
如果您有自己的深度校准参数，则可以在启动后将SetIrCameraParams（）设置为true。

Otherwise you can also use the factory preset parameters for Registration. You can also provide your own depth calibration parameterss (though not color camera calibration parameters right now). Registration is optional.
否则您也可以使用出厂预设参数进行注册。 您还可以提供自己的深度校准参数（现在不是彩色摄像机校准参数）。 注册是可选的。

  libfreenect2::Registration* registration = new libfreenect2::Registration(dev->getIrCameraParams(), dev->getColorCameraParams());
  libfreenect2::Frame undistorted(512, 424, 4), registered(512, 424, 4);

At this time, the processing has begun, and the data flows through the pipeline towards your frame listeners.
此时，处理已经开始，数据通过管道流向您的框架监听器。

Receive Image Frames
接收图像帧

This example uses a loop to receive image frames.
此示例使用循环来接收图像帧。
  while(!protonect_shutdown && (framemax == (size_t)-1 || framecount < framemax))
  {
    if (!listener.waitForNewFrame(frames, 10*1000)) // 10 sconds
    {
      std::cout << "timeout!" << std::endl;
      return -1;
    }
    libfreenect2::Frame *rgb = frames[libfreenect2::Frame::Color];
    libfreenect2::Frame *ir = frames[libfreenect2::Frame::Ir];
    libfreenect2::Frame *depth = frames[libfreenect2::Frame::Depth];

waitForNewFrame() here will block until required frames are all received, and then you can extract Frame according to the type.
waitForNewFrame（）这里将阻塞，直到所有帧都被接收，然后可以根据类型提取Frame。

See libfreenect2::Frame for details about pixel format, dimensions, and metadata.
有关像素格式，维度和元数据的详细信息，请参阅libfreenect2 :: Frame。

You can do your own things using the frame data. You can feed it to OpenCV, PCL, etc. Here, you can perform registration:
您可以使用框架数据来做自己的事情。 您可以将其提供给OpenCV，PCL等。您可以执行注册：
      registration->apply(rgb, depth, &undistorted, &registered);

After you are done with this frame, you must release it.
完成此框架后，您必须释放它。
    listener.release(frames);
  }

Stop the Device
停止设备

If you are finished and no longer need to receive more frames, you can stop the device and exit.
如果您已经完成并且不再需要接收更多的帧，您可以停止设备并退出。

  dev->stop();
  dev->close();

Pause the Device
暂停设备

You can also temporarily pause the device with stop() and start().
您也可以暂停使用stop（）和start（）暂停设备。
  if (protonect_paused)
    devtopause->start();
  else
    devtopause->stop();
  protonect_paused = !protonect_paused;

Doing this during waitForNewFrame() should be thread safe, and tests also show well. But a guarantee of thread safety has not been checked yet.
在waitForNewFrame（）中执行此操作应该是线程安全的，测试也显示得很好。 但螺纹安全的保证尚未检查。

THE END.

